// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "car-services-api.totote05.ar/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, ID
func (_m *Service) Delete(ctx context.Context, ID entities.ServiceID) error {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ServiceID) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByName provides a mock function with given fields: ctx, Name
func (_m *Service) FindByName(ctx context.Context, Name string) ([]entities.Service, error) {
	ret := _m.Called(ctx, Name)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 []entities.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entities.Service, error)); ok {
		return rf(ctx, Name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entities.Service); ok {
		r0 = rf(ctx, Name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, Name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, ID
func (_m *Service) Get(ctx context.Context, ID entities.ServiceID) (*entities.Service, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entities.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ServiceID) (*entities.Service, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ServiceID) *entities.Service); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ServiceID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *Service) GetAll(ctx context.Context) ([]entities.Service, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entities.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entities.Service, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entities.Service); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, service
func (_m *Service) Save(ctx context.Context, service entities.Service) error {
	ret := _m.Called(ctx, service)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Service) error); ok {
		r0 = rf(ctx, service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
