// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "car-services-api.totote05.ar/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// Vehicle is an autogenerated mock type for the Vehicle type
type Vehicle struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, ID
func (_m *Vehicle) Delete(ctx context.Context, ID entities.VehicleID) error {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.VehicleID) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByPlate provides a mock function with given fields: ctc, plate
func (_m *Vehicle) FindByPlate(ctc context.Context, plate string) (*entities.Vehicle, error) {
	ret := _m.Called(ctc, plate)

	if len(ret) == 0 {
		panic("no return value specified for FindByPlate")
	}

	var r0 *entities.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.Vehicle, error)); ok {
		return rf(ctc, plate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Vehicle); ok {
		r0 = rf(ctc, plate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Vehicle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctc, plate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, ID
func (_m *Vehicle) Get(ctx context.Context, ID entities.VehicleID) (*entities.Vehicle, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entities.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.VehicleID) (*entities.Vehicle, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.VehicleID) *entities.Vehicle); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Vehicle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.VehicleID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *Vehicle) GetAll(ctx context.Context) ([]entities.Vehicle, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entities.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entities.Vehicle, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entities.Vehicle); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Vehicle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, vehicle
func (_m *Vehicle) Save(ctx context.Context, vehicle entities.Vehicle) error {
	ret := _m.Called(ctx, vehicle)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Vehicle) error); ok {
		r0 = rf(ctx, vehicle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewVehicle creates a new instance of Vehicle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVehicle(t interface {
	mock.TestingT
	Cleanup(func())
}) *Vehicle {
	mock := &Vehicle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
